// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

model Profile {
    id         String    @id @db.Uuid
    full_name  String?
    email      String?   @unique
    avatar_url String?
    
    // Relations
    roadmaps   Roadmap[]

    @@map("profiles")
}

model Roadmap {
    id          String   @id @default(cuid())
    title       String
    description String
    difficulty  String   // "beginner", "intermediate", "advanced"
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    // Foreign key to profile
    profileId   String?  @db.Uuid
    profile     Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
    
    // Relations
    topics      Topic[]
    projects    Project[]
    
    @@map("roadmaps")
}

model Topic {
    id        String  @id
    title     String
    summary   String
    level     Int
    parentId  String?
    
    // Foreign key to roadmap
    roadmapId String
    roadmap   Roadmap @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
    
    // Self-referential relations for parent-child
    parent    Topic?  @relation("TopicHierarchy", fields: [parentId], references: [id])
    children  Topic[] @relation("TopicHierarchy")
    
    // Relations to resources and projects
    resources       Resource[]
    relatedProjects ProjectTopic[]
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    @@map("topics")
}

model Project {
    id               String   @id @default(cuid())
    title            String
    description      String
    difficulty       ProjectDifficulty
    estimatedTime    String   // e.g., "2-3 hours", "1 week", "2-4 days"
    technologies     String[] // Array of technologies/tools/skills
    deliverables     String[] // What the learner will build/create
    
    // Foreign key to roadmap
    roadmapId        String
    roadmap          Roadmap  @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
    
    // Many-to-many relation with topics (a project can cover multiple topics)
    relatedTopics    ProjectTopic[]
    
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
    
    @@map("projects")
}

model ProjectTopic {
    id        String  @id @default(cuid())
    projectId String
    topicId   String
    
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    topic     Topic   @relation(fields: [topicId], references: [id], onDelete: Cascade)
    
    @@unique([projectId, topicId])
    @@map("project_topics")
}

model Resource {
    id               String   @id @default(cuid())
    title            String
    description      String?
    url              String
    type             ResourceType
    difficulty       String?  // "beginner", "intermediate", "advanced"
    relevanceScore   Float?   // 1-10 rating of relevance
    relevanceReason  String?  // AI-generated reason for relevance
    thumbnailUrl     String?
    channelTitle     String?  // For YouTube videos
    publishedAt      DateTime?
    duration         String?  // For videos (e.g., "PT10M30S" for 10:30)
    
    // Foreign key to topic
    topicId String
    topic   Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    @@map("resources")
}

enum ResourceType {
    YOUTUBE_VIDEO
    ARTICLE
    DOCUMENTATION
    TUTORIAL
    COURSE
    BOOK
    PODCAST
    EXERCISE
    QUIZ
    OTHER
}

enum ProjectDifficulty {
    BEGINNER
    INTERMEDIATE
    ADVANCED
}
