"use client";

import { useState, useEffect, useRef } from "react";
import { useSearchParams } from "next/navigation";
import Link from "next/link";
import { Button } from "~/components/ui/button";
import { Input } from "~/components/ui/input";
import { Label } from "~/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "~/components/ui/select";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "~/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "~/components/ui/tabs";
import { Badge } from "~/components/ui/badge";
import { ScrollArea } from "~/components/ui/scroll-area";
import { ArrowLeft } from "lucide-react";
import { api } from "~/trpc/react";
import RoadmapLoading from "~/components/RoadmapLoading";
import CustomMindmap from "~/components/CustomMindmap";
import type { Roadmap, Topic } from "~/course-builder-ai/roadmap";

export default function MapClient() {
  const searchParams = useSearchParams();
  const [topic, setTopic] = useState("");
  const [difficulty, setDifficulty] = useState<"beginner" | "intermediate" | "advanced">("beginner");
  const [roadmap, setRoadmap] = useState<Roadmap | null>(null);
  const [selectedTopic, setSelectedTopic] = useState<Topic | null>(null);
  const [isGeneratingFromUrl, setIsGeneratingFromUrl] = useState(false);
  const hasAutoGenerated = useRef(false);

  // tRPC mutation for generating roadmap
  const generateRoadmapMutation = api.roadmap.generate.useMutation({
    onSuccess: (data) => {
      console.log("üéâ Roadmap generation success, setting roadmap data:", data.data);
      setRoadmap(data.data);
      setSelectedTopic(null);
      setIsGeneratingFromUrl(false);
      console.log("‚úÖ State updated - isGeneratingFromUrl set to false");
    },
    onError: (error) => {
      console.error("‚ùå Error generating roadmap:", error);
      setIsGeneratingFromUrl(false);
    }
  });

  // Initialize from URL parameters
  useEffect(() => {
    const urlTopic = searchParams.get('topic');
    const urlDifficulty = searchParams.get('difficulty');
    const autoGenerate = searchParams.get('autoGenerate');

    if (urlTopic) {
      setTopic(urlTopic);
    }
    
    if (urlDifficulty && ['beginner', 'intermediate', 'advanced'].includes(urlDifficulty)) {
      setDifficulty(urlDifficulty as "beginner" | "intermediate" | "advanced");
    }

    // Auto-generate roadmap if coming from course selection - only once
    if (urlTopic && urlDifficulty && autoGenerate === 'true' && !hasAutoGenerated.current && !generateRoadmapMutation.isPending) {
      hasAutoGenerated.current = true;
      setIsGeneratingFromUrl(true);
      generateRoadmapMutation.mutate({
        topic: urlTopic,
        difficulty: urlDifficulty as "beginner" | "intermediate" | "advanced"
      });
    }
  }, [searchParams, generateRoadmapMutation]);

  const handleGenerateRoadmap = () => {
    if (!topic.trim()) return;

    generateRoadmapMutation.mutate({ topic, difficulty });
  };

  const getTopicsByLevel = (level: number): Topic[] => {
    if (!roadmap) return [];
    return roadmap.topics.filter(topic => topic.level === level);
  };

  // Show full-page loading state while generating roadmap
  console.log("üîç Checking loading state:", {
    isPending: generateRoadmapMutation.isPending,
    isGeneratingFromUrl,
    hasRoadmap: !!roadmap,
    roadmapTitle: roadmap?.title
  });
  
  // Only show loading if we don't have a roadmap yet AND we're either pending or generating from URL
  if (!roadmap && (generateRoadmapMutation.isPending || isGeneratingFromUrl)) {
    console.log("üîÑ Showing loading state");
    return (
      <div className="container mx-auto p-6">
        <div className="flex items-center space-x-4 mb-6">
          <Link href="/library">
            <Button variant="ghost" size="sm">
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Library
            </Button>
          </Link>
        </div>
        <RoadmapLoading topic={topic} difficulty={difficulty} />
      </div>
    );
  }

  console.log("üñ•Ô∏è Rendering main content");

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="flex items-center space-x-4">
        <Link href="/library">
          <Button variant="ghost" size="sm">
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Library
          </Button>
        </Link>
      </div>
      
      <div className="text-center space-y-2">
        <h1 className="text-3xl font-bold">
          {roadmap ? roadmap.title : "Learning Roadmap Generator"}
        </h1>
        <p className="text-muted-foreground">
          {roadmap 
            ? roadmap.description 
            : "Generate interactive mindmaps for any learning topic"
          }
        </p>
        {roadmap && (
          <div className="flex justify-center">
            <Badge variant="outline" className="text-sm">
              {roadmap.difficulty}
            </Badge>
          </div>
        )}
      </div>

      {/* Input Section - Only show when not auto-generating */}
      {!searchParams.get('autoGenerate') && (
        <Card>
          <CardHeader>
            <CardTitle>Create Your Learning Roadmap</CardTitle>
            <CardDescription>Enter a topic and difficulty level to generate a comprehensive learning path</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="md:col-span-2 space-y-2">
                <Label htmlFor="topic">Learning Topic</Label>
                <Input
                  id="topic"
                  placeholder="e.g., Machine Learning, Web Development, Data Science"
                  value={topic}
                  onChange={(e) => setTopic(e.target.value)}
                  onKeyDown={(e) => e.key === "Enter" && handleGenerateRoadmap()}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="difficulty">Difficulty Level</Label>
                <Select value={difficulty} onValueChange={(value: "beginner" | "intermediate" | "advanced") => setDifficulty(value)}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="beginner">Beginner</SelectItem>
                    <SelectItem value="intermediate">Intermediate</SelectItem>
                    <SelectItem value="advanced">Advanced</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            <Button 
              onClick={handleGenerateRoadmap} 
              disabled={generateRoadmapMutation.isPending ?? !topic.trim()}
              className="w-full"
            >
              {generateRoadmapMutation.isPending ? "Generating Roadmap..." : "Generate Roadmap"}
            </Button>
          </CardContent>
        </Card>
      )}

      {/* Results Section */}
      {generateRoadmapMutation.isError && (
        <Card className="border-red-200 bg-red-50 dark:border-red-800 dark:bg-red-950">
          <CardHeader>
            <CardTitle className="text-red-800 dark:text-red-200">Error Generating Roadmap</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-red-700 dark:text-red-300">
              {generateRoadmapMutation.error?.message ?? "Something went wrong while generating your roadmap. Please try again."}
            </p>
            <Button 
              variant="outline" 
              onClick={() => generateRoadmapMutation.reset()}
              className="mt-4"
            >
              Try Again
            </Button>
          </CardContent>
        </Card>
      )}

      {/* Mindmap Section - Only show when roadmap is available */}
      {roadmap && (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Mindmap Visualization */}
          <div className="lg:col-span-2">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  {roadmap.title}
                  <Badge variant="outline">{roadmap.difficulty}</Badge>
                </CardTitle>
                <CardDescription>{roadmap.description}</CardDescription>
              </CardHeader>
              <CardContent className="p-0">
                <CustomMindmap 
                  roadmap={roadmap} 
                  onTopicSelect={setSelectedTopic}
                  selectedTopic={selectedTopic}
                />
              </CardContent>
            </Card>
          </div>

          {/* Topic Details Sidebar */}
          <div className="space-y-4">
            {selectedTopic ? (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center justify-between">
                    {selectedTopic.title}
                    <Badge variant="secondary">Level {selectedTopic.level}</Badge>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-sm text-muted-foreground">{selectedTopic.summary}</p>
                  {selectedTopic.children.length > 0 && (
                    <div className="mt-4">
                      <Label className="text-sm font-medium">Related Topics:</Label>
                      <div className="flex flex-wrap gap-1 mt-2">
                        {selectedTopic.children.map((childId) => {
                          const childTopic = roadmap.topics.find(t => t.id === childId);
                          return childTopic ? (
                            <Badge 
                              key={childId} 
                              variant="outline" 
                              className="cursor-pointer hover:bg-primary hover:text-primary-foreground"
                              onClick={() => setSelectedTopic(childTopic)}
                            >
                              {childTopic.title}
                            </Badge>
                          ) : null;
                        })}
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>
            ) : (
              <Card>
                <CardHeader>
                  <CardTitle>Topic Details</CardTitle>
                  <CardDescription>Click on any node in the mindmap to see detailed information</CardDescription>
                </CardHeader>
              </Card>
            )}

            {/* Topics Overview */}
            <Card>
              <CardHeader>
                <CardTitle>Learning Path Overview</CardTitle>
              </CardHeader>
              <CardContent>
                <Tabs defaultValue="level0" className="w-full">
                  <TabsList className="grid grid-cols-4 w-full">
                    {[0, 1, 2, 3].map((level) => {
                      const topicsAtLevel = getTopicsByLevel(level);
                      return topicsAtLevel.length > 0 ? (
                        <TabsTrigger key={level} value={`level${level}`}>
                          L{level} ({topicsAtLevel.length})
                        </TabsTrigger>
                      ) : null;
                    })}
                  </TabsList>
                  
                  {[0, 1, 2, 3].map((level) => {
                    const topicsAtLevel = getTopicsByLevel(level);
                    return topicsAtLevel.length > 0 ? (
                      <TabsContent key={level} value={`level${level}`}>
                        <ScrollArea className="h-[300px]">
                          <div className="space-y-2">
                            {topicsAtLevel.map((topic) => (
                              <div 
                                key={topic.id}
                                className="p-3 border rounded-lg cursor-pointer hover:bg-muted/50 transition-colors"
                                onClick={() => setSelectedTopic(topic)}
                              >
                                <div className="font-medium text-sm">{topic.title}</div>
                                <div className="text-xs text-muted-foreground mt-1 line-clamp-2">
                                  {topic.summary}
                                </div>
                              </div>
                            ))}
                          </div>
                        </ScrollArea>
                      </TabsContent>
                    ) : null;
                  })}
                </Tabs>
              </CardContent>
            </Card>
          </div>
        </div>
      )}
    </div>
  );
}
