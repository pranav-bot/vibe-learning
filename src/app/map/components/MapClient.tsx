"use client";

import { useState, useEffect, useRef } from "react";
import { useSearchParams } from "next/navigation";
import Link from "next/link";
import { Button } from "~/components/ui/button";
import { Input } from "~/components/ui/input";
import { Label } from "~/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "~/components/ui/select";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "~/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "~/components/ui/tabs";
import { Badge } from "~/components/ui/badge";
import { ScrollArea } from "~/components/ui/scroll-area";
import { ArrowLeft, Play } from "lucide-react";
import { api } from "~/trpc/react";
import RoadmapLoading from "~/components/RoadmapLoading";
import CustomMindmap from "~/components/CustomMindmap";
import DraggableWindow from "~/components/DraggableWindow";
import type { Roadmap, Topic } from "~/course-builder-ai/roadmap";

// Type for YouTube resources
interface YouTubeVideo {
  videoId: string;
  title: string;
  description: string;
  channelTitle: string;
  publishedAt: string;
  thumbnailUrl: string;
  relevanceScore: number;
  relevanceReason: string;
  url: string;
}

interface YouTubeResources {
  selectedVideos: YouTubeVideo[];
  summary: string;
  totalSearchResults: number;
}

export default function MapClient() {
  const searchParams = useSearchParams();
  const [topic, setTopic] = useState("");
  const [difficulty, setDifficulty] = useState<"beginner" | "intermediate" | "advanced">("beginner");
  const [roadmap, setRoadmap] = useState<Roadmap | null>(null);
  const [selectedTopic, setSelectedTopic] = useState<Topic | null>(null);
  const [youtubeResources, setYoutubeResources] = useState<YouTubeResources | null>(null);
  const [isGeneratingFromUrl, setIsGeneratingFromUrl] = useState(false);
  const hasAutoGenerated = useRef(false);
  
  // Window management state
  const [windows, setWindows] = useState({
    topicDetails: { visible: true, minimized: false },
    learningPath: { visible: true, minimized: false }
  });

  const toggleWindow = (windowKey: keyof typeof windows, action: 'toggle' | 'minimize' | 'close') => {
    setWindows(prev => ({
      ...prev,
      [windowKey]: {
        ...prev[windowKey],
        visible: action === 'close' ? false : prev[windowKey].visible,
        minimized: action === 'minimize' ? !prev[windowKey].minimized : prev[windowKey].minimized
      }
    }));
  };

  // tRPC mutation for generating roadmap
  const generateRoadmapMutation = api.roadmap.generate.useMutation({
    onSuccess: (data) => {
      console.log("üéâ Roadmap generation success, setting roadmap data:", data.data);
      setRoadmap(data.data);
      setSelectedTopic(null);
      setIsGeneratingFromUrl(false);
      
      // Save to localStorage
      try {
        localStorage.setItem('currentRoadmap', JSON.stringify(data.data));
        console.log("‚úÖ Roadmap saved to localStorage");
      } catch (error) {
        console.warn("Failed to save roadmap to localStorage:", error);
      }
      
      console.log("‚úÖ State updated - isGeneratingFromUrl set to false");
    },
    onError: (error) => {
      console.error("‚ùå Error generating roadmap:", error);
      setIsGeneratingFromUrl(false);
    }
  });

  // tRPC mutation for fetching YouTube resources
  const fetchYoutubeResourcesMutation = api.roadmap.youtubeResources.useMutation({
    onSuccess: (data) => {
      console.log("üé• YouTube resources fetched successfully:", data.data);
      setYoutubeResources(data.data);
    },
    onError: (error) => {
      console.error("‚ùå Error fetching YouTube resources:", error);
    }
  });

  // Initialize from URL parameters and localStorage
  useEffect(() => {
    const urlTopic = searchParams.get('topic');
    const urlDifficulty = searchParams.get('difficulty');
    const autoGenerate = searchParams.get('autoGenerate');

    if (urlTopic) {
      setTopic(urlTopic);
    }
    
    if (urlDifficulty && ['beginner', 'intermediate', 'advanced'].includes(urlDifficulty)) {
      setDifficulty(urlDifficulty as "beginner" | "intermediate" | "advanced");
    }

    // Load roadmap from localStorage if no URL parameters
    if (!urlTopic && !autoGenerate) {
      try {
        const savedRoadmap = localStorage.getItem('currentRoadmap');
        if (savedRoadmap) {
          const parsedRoadmap = JSON.parse(savedRoadmap) as Roadmap;
          setRoadmap(parsedRoadmap);
          console.log("‚úÖ Roadmap loaded from localStorage");
        }
      } catch (error) {
        console.warn("Failed to load roadmap from localStorage:", error);
      }
    }

    // Auto-generate roadmap if coming from course selection - only once
    if (urlTopic && urlDifficulty && autoGenerate === 'true' && !hasAutoGenerated.current && !generateRoadmapMutation.isPending) {
      hasAutoGenerated.current = true;
      setIsGeneratingFromUrl(true);
      generateRoadmapMutation.mutate({
        topic: urlTopic,
        difficulty: urlDifficulty as "beginner" | "intermediate" | "advanced"
      });
    }
  }, [searchParams, generateRoadmapMutation]);

  const handleGenerateRoadmap = () => {
    if (!topic.trim()) return;

    generateRoadmapMutation.mutate({ topic, difficulty });
  };

  const handleFetchResources = () => {
    if (!selectedTopic) return;
    
    // Clear previous resources when fetching new ones
    setYoutubeResources(null);
    
    fetchYoutubeResourcesMutation.mutate({
      topic: selectedTopic.title,
      difficulty: roadmap?.difficulty ?? 'beginner',
      topicSummary: selectedTopic.summary
    });
  };

  const getTopicsByLevel = (level: number): Topic[] => {
    if (!roadmap) return [];
    return roadmap.topics.filter(topic => topic.level === level);
  };

  // Show full-page loading state while generating roadmap
  console.log("üîç Checking loading state:", {
    isPending: generateRoadmapMutation.isPending,
    isGeneratingFromUrl,
    hasRoadmap: !!roadmap,
    roadmapTitle: roadmap?.title
  });
  
  // Only show loading if we don't have a roadmap yet AND we're either pending or generating from URL
  if (!roadmap && (generateRoadmapMutation.isPending || isGeneratingFromUrl)) {
    console.log("üîÑ Showing loading state");
    return (
      <div className="container mx-auto p-6">
        <div className="flex items-center space-x-4 mb-6">
          <Link href="/library">
            <Button variant="ghost" size="sm">
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back to Library
            </Button>
          </Link>
        </div>
        <RoadmapLoading topic={topic} difficulty={difficulty} />
      </div>
    );
  }

  console.log("üñ•Ô∏è Rendering main content");

  return (
    <div className={`${roadmap ? 'h-screen overflow-hidden' : 'container mx-auto p-6'} space-y-6`}>
      {/* Header - Only show when no roadmap */}
      {!roadmap && (
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <Link href="/library">
              <Button variant="ghost" size="sm">
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back to Library
              </Button>
            </Link>
          </div>
          
          <div className="text-center space-y-2">
            <h1 className="text-3xl font-bold">Learning Roadmap Generator</h1>
            <p className="text-muted-foreground">Generate interactive mindmaps for any learning topic</p>
          </div>
          
          <div className="w-24" /> {/* Spacer for centering */}
        </div>
      )}

      {/* Input Section - Only show when not auto-generating and no roadmap */}
      {!searchParams.get('autoGenerate') && !roadmap && (
        <div className="container mx-auto px-6">
          <Card>
            <CardHeader>
              <CardTitle>Create Your Learning Roadmap</CardTitle>
              <CardDescription>Enter a topic and difficulty level to generate a comprehensive learning path</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="md:col-span-2 space-y-2">
                  <Label htmlFor="topic">Learning Topic</Label>
                  <Input
                    id="topic"
                    placeholder="e.g., Machine Learning, Web Development, Data Science"
                    value={topic}
                    onChange={(e) => setTopic(e.target.value)}
                    onKeyDown={(e) => e.key === "Enter" && handleGenerateRoadmap()}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="difficulty">Difficulty Level</Label>
                  <Select value={difficulty} onValueChange={(value: "beginner" | "intermediate" | "advanced") => setDifficulty(value)}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="beginner">Beginner</SelectItem>
                      <SelectItem value="intermediate">Intermediate</SelectItem>
                      <SelectItem value="advanced">Advanced</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <Button 
                onClick={handleGenerateRoadmap} 
                disabled={generateRoadmapMutation.isPending ?? !topic.trim()}
                className="w-full"
              >
                {generateRoadmapMutation.isPending ? "Generating Roadmap..." : "Generate Roadmap"}
              </Button>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Results Section */}
      {generateRoadmapMutation.isError && (
        <div className="container mx-auto px-6">
          <Card className="border-red-200 bg-red-50 dark:border-red-800 dark:bg-red-950">
            <CardHeader>
              <CardTitle className="text-red-800 dark:text-red-200">Error Generating Roadmap</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-red-700 dark:text-red-300">
                {generateRoadmapMutation.error?.message ?? "Something went wrong while generating your roadmap. Please try again."}
              </p>
              <Button 
                variant="outline" 
                onClick={() => generateRoadmapMutation.reset()}
                className="mt-4"
              >
                Try Again
              </Button>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Mindmap Canvas - Full screen freeform canvas */}
      {roadmap && (
        <div className="fixed inset-0 bg-background overflow-hidden">
          {/* Floating Header */}
          <div className="absolute top-4 left-1/2 transform -translate-x-1/2 z-50">
            <Card className="px-6 py-3 shadow-lg bg-background/95 backdrop-blur-sm">
              <div className="text-center space-y-2">
                <h1 className="text-xl font-bold">{roadmap.title}</h1>
                <p className="text-sm text-muted-foreground">{roadmap.description}</p>
                <Badge variant="outline" className="text-xs">
                  {roadmap.difficulty}
                </Badge>
              </div>
            </Card>
          </div>

          {/* Back Button */}
          <div className="absolute top-4 left-4 z-50">
            <Link href="/library">
              <Button variant="ghost" size="sm" className="bg-background/95 backdrop-blur-sm">
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back to Library
              </Button>
            </Link>
          </div>

          {/* Main Mindmap Canvas */}
          <div className="absolute inset-0">
            <CustomMindmap 
              roadmap={roadmap} 
              onTopicSelect={(topic) => {
                setSelectedTopic(topic);
                setYoutubeResources(null); // Clear resources when selecting a new topic
              }}
              selectedTopic={selectedTopic}
            />
          </div>

          {/* Draggable Windows */}
          
          {/* Topic Details Window */}
          {windows.topicDetails.visible && (
            <DraggableWindow
              title="Topic Details"
              initialPosition={{ x: 800, y: 100 }}
              initialSize={{ width: 400, height: 600 }}
              isMinimized={windows.topicDetails.minimized}
              onMinimize={() => toggleWindow('topicDetails', 'minimize')}
              onClose={() => toggleWindow('topicDetails', 'close')}
            >
              {selectedTopic ? (
                <div className="space-y-4">
                  <div>
                    <div className="flex items-center justify-between mb-2">
                      <h3 className="font-semibold">{selectedTopic.title}</h3>
                      <Badge variant="secondary">Level {selectedTopic.level}</Badge>
                    </div>
                    <p className="text-sm text-muted-foreground">{selectedTopic.summary}</p>
                  </div>
                  
                  {selectedTopic.children.length > 0 && (
                    <div>
                      <Label className="text-sm font-medium">Related Topics:</Label>
                      <div className="flex flex-wrap gap-1 mt-2">
                        {selectedTopic.children.map((childId) => {
                          const childTopic = roadmap.topics.find(t => t.id === childId);
                          return childTopic ? (
                            <Badge 
                              key={childId} 
                              variant="outline" 
                              className="cursor-pointer hover:bg-primary hover:text-primary-foreground"
                              onClick={() => setSelectedTopic(childTopic)}
                            >
                              {childTopic.title}
                            </Badge>
                          ) : null;
                        })}
                      </div>
                    </div>
                  )}
                  
                  <div className="pt-2">
                    <Button 
                      size="sm" 
                      className="w-full"
                      onClick={handleFetchResources}
                      disabled={fetchYoutubeResourcesMutation.isPending}
                    >
                      {fetchYoutubeResourcesMutation.isPending ? "Fetching Resources..." : "Fetch Resources"}
                    </Button>
                  </div>

                  {/* YouTube Resources Section */}
                  {youtubeResources && (
                    <div className="border-t pt-4 space-y-3">
                      <Label className="text-sm font-medium">YouTube Resources:</Label>
                      <ScrollArea className="h-64">
                        <div className="space-y-2">
                          {youtubeResources.selectedVideos.map((video) => (
                            <div key={video.videoId} className="border rounded-lg p-3 space-y-2">
                              <div className="flex items-start space-x-3">
                                {/* YouTube Icon */}
                                <div className="flex-shrink-0 mt-0.5">
                                  <Play className="h-4 w-4 text-red-600 fill-red-600" />
                                </div>
                                
                                {/* Video Info */}
                                <div className="flex-1 min-w-0 space-y-1">
                                  <h4 
                                    className="font-medium text-sm line-clamp-2 cursor-pointer hover:text-blue-600 hover:underline transition-colors"
                                    onClick={() => {
                                      // Create a special contentId for YouTube videos
                                      const contentId = `youtube_${video.videoId}`;
                                      
                                      // Store video data in localStorage for the learn page
                                      const contentData = {
                                        content_id: contentId,
                                        content_type: 'youtube' as const,
                                        title: video.title,
                                        url: video.url,
                                        text_length: video.description?.length ?? 0,
                                        text_preview: video.description?.substring(0, 200) ?? '',
                                        status: 'completed'
                                      };
                                      
                                      localStorage.setItem(`content_${contentId}`, JSON.stringify(contentData));
                                      
                                      // Navigate to learn page
                                      window.open(`/learn/${contentId}`, '_blank');
                                    }}
                                  >
                                    {video.title}
                                  </h4>
                                  <p className="text-xs text-muted-foreground">{video.channelTitle}</p>
                                  <div className="flex items-center gap-2">
                                    <Badge variant="outline" className="text-xs">
                                      Score: {video.relevanceScore}/10
                                    </Badge>
                                  </div>
                                </div>
                              </div>
                              
                              <p className="text-xs text-muted-foreground line-clamp-2 ml-7">
                                {video.relevanceReason}
                              </p>
                            </div>
                          ))}
                        </div>
                      </ScrollArea>
                      <div className="text-xs text-muted-foreground">
                        {youtubeResources.summary}
                      </div>
                    </div>
                  )}

                  {/* Error state for resources */}
                  {fetchYoutubeResourcesMutation.isError && (
                    <div className="border-t pt-4">
                      <div className="text-sm text-red-500">
                        Error: {fetchYoutubeResourcesMutation.error?.message}
                      </div>
                    </div>
                  )}
                </div>
              ) : (
                <div className="text-center text-muted-foreground">
                  <p>Click on any node in the mindmap to see detailed information</p>
                </div>
              )}
            </DraggableWindow>
          )}

          {/* Learning Path Overview Window */}
          {windows.learningPath.visible && (
            <DraggableWindow
              title="Learning Path Overview"
              initialPosition={{ x: 50, y: 100 }}
              initialSize={{ width: 350, height: 400 }}
              isMinimized={windows.learningPath.minimized}
              onMinimize={() => toggleWindow('learningPath', 'minimize')}
              onClose={() => toggleWindow('learningPath', 'close')}
            >
              <Tabs defaultValue="level0" className="w-full">
                <TabsList className="grid grid-cols-4 w-full">
                  {[0, 1, 2, 3].map((level) => {
                    const topicsAtLevel = getTopicsByLevel(level);
                    return topicsAtLevel.length > 0 ? (
                      <TabsTrigger key={level} value={`level${level}`}>
                        L{level} ({topicsAtLevel.length})
                      </TabsTrigger>
                    ) : null;
                  })}
                </TabsList>
                
                {[0, 1, 2, 3].map((level) => {
                  const topicsAtLevel = getTopicsByLevel(level);
                  return topicsAtLevel.length > 0 ? (
                    <TabsContent key={level} value={`level${level}`}>
                      <ScrollArea className="h-[280px]">
                        <div className="space-y-2">
                          {topicsAtLevel.map((topic) => (
                            <div 
                              key={topic.id}
                              className="p-3 border rounded-lg cursor-pointer hover:bg-muted/50 transition-colors"
                              onClick={() => setSelectedTopic(topic)}
                            >
                              <div className="font-medium text-sm">{topic.title}</div>
                              <div className="text-xs text-muted-foreground mt-1 line-clamp-2">
                                {topic.summary}
                              </div>
                            </div>
                          ))}
                        </div>
                      </ScrollArea>
                    </TabsContent>
                  ) : null;
                })}
              </Tabs>
            </DraggableWindow>
          )}

          {/* Floating Action Buttons for reopening closed windows */}
          <div className="absolute bottom-4 right-4 flex flex-col space-y-2">
            {!windows.topicDetails.visible && (
              <Button
                size="sm"
                onClick={() => setWindows(prev => ({ ...prev, topicDetails: { visible: true, minimized: false } }))}
              >
                Show Topic Details
              </Button>
            )}
            {!windows.learningPath.visible && (
              <Button
                size="sm"
                onClick={() => setWindows(prev => ({ ...prev, learningPath: { visible: true, minimized: false } }))}
              >
                Show Learning Path
              </Button>
            )}
          </div>
        </div>
      )}
    </div>
  );
}
